rowMeans(setnorm)
setnorm
setnorm <-mvrnorm(n=1000mu=rep(0,10),Sigma=Sigma)
setnorm <-mvrnorm(n=1000,mu=rep(0,10),Sigma=Sigma)
rowMeans(setnorm)
var(rowMeans(setnorm))
library(GEOquery)
install.packages(c("manipulate", "shiny"))
library(biocInstaller)
library("BiocInstaller", lib.loc="C:/Program Files/R/R-3.1.2/library")
biocLite()
biocLite("GEOquery")
library(GEOquery)
e = getGEO("GSE34313")[[1]]
juxta = function (chrname="chr22", ...)
{
require(ERBS)
data(HepG2)
data(GM12878)
require(ggbio)
require(GenomicRanges)  # "subset" is overused, need import detail
ap1 = autoplot(GenomicRanges::subset(HepG2, seqnames==chrname))
ap2 = autoplot(GenomicRanges::subset(GM12878, seqnames==chrname))
tracks(HepG2 = ap1, Bcell = ap2, ...)
}
juxta()
package.skeleton("erbsViz", "juxta")
install.packages("erbsViz", repos=NULL, type="source")
library(erbsViz)
package.skeleton("erbsViz", "juxta")
install.packages("erbsViz", repos=NULL, type="source")
package.skeleton("erbsViz", "juxta")
getwd()
library(erbsViz)
install.packages("erbsViz", repos=NULL, type="source")
library(erbsViz)
jdemo = juxta()
class(jdemo)
?Tracks
?tracks
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <-as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
rf.model <-train(y ~., method="rf", data=vowel.train)
set.seed(33833)
boost.model <-train(y~.,method="gbm", data=vowel.train)
rf.model
boost.model
rf.pred <- predict(rf.model, newdata=vowel.test)
rf.pred
confusionMatrix(rf.pred, vowel.test$y)
boost.pred <-predict(boost.model, newdata=vowel.test)
confusionMatrix(boos.pred, vowel.test$y)
confusionMatrix(boost.pred, vowel.test$y)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(adData)
View(predictors)
View(training)
rf.mod <-train(diagnosis~., method="rf", data=training)
boost.mod <-train(diagnosis~., method="gbm", data=training)
lda.mod <-train(diagnosis~., method="lda", data=training)
rf.predict <- predict(rf.mod, newdata=testing)
confusionMatrix(rf.mod, testing$diagnosis)
rf.predict
confusionMatrix(rf.mod, as.factor(testing$diagnosis))
str(testing)
rf.predict <- predict(rf.mod, newdata=testing)
confusionMatrix(rf.mod, testing$diagnosis)
testing$diagnosis
boost.pred <-predict(boost.mod, newdata=testing)
confusionMatrix(boost.pred, testing$diagnosis)
confusionMatrix(rf.pred, testing$diagnosis)
rf.pred <- predict(rf.mod, newdata=testing)
confusionMatrix(rf.pred, testing$diagnosis)
lda.pred <-predict(lda.mod, newdata=testing)
confusionMatrix(lda.pred, testing$diagnosis)
install.packages(c("BH", "manipulate", "mda", "rgdal", "Rmpi", "testthat"))
library("devtools", lib.loc="C:/Program Files/R/R-3.1.2/library")
install_github("medeley", "mewo2")
install_github("medeley")
install_github("medely", "mewo2")
install_github("mewo2/medely")
install_github("medely")
install_github("mewo2/medley")
library(medley)
library(randomForest)
confusionMatrix(rf.pred, testing$diagnosis)
confusionMatrix(boost.pred, testing$diagnosis)
confusionMatrix(lda.pred, testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
View(training)
lasso.mod <-train(CompressiveStrength~., method="lasso", data=training)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
lasso.mod <-train(CompressiveStrength~., method="lasso", data=training)
library(caret)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
lasso.mod <-train(CompressiveStrength~., method="lasso", data=training)
lasso.pred <-predict(lasso.mod, newdata=testing)
confusionMatrix(lasso.pred, testing$CompressiveStrength)
str(lasso.mod)
library(pasillaBamSubset)
install.packages(c("AGD", "ape", "BRugs", "earth", "manipulate", "mnormt", "plotmo", "polyclip", "pryr", "R.utils", "R2WinBUGS", "rgeos", "XML"))
library("BiocInstaller", lib.loc="C:/Program Files/R/R-3.1.2/library")
biocLite('pasillaBamSubset')
library(pasillaBamSubset)
bam.file <- untreated3_chr4()
library(Rsamtools)
bf <- BamFile(bam.file)
library(TxDb.Dmelanogaster.UCSC.dm3.ensGene)
biocLite("TxDb.Dmelanogaster.UCSC.dm3.ensGene")
library(TxDb.Dmelanogaster.UCSC.dm3.ensGene)
txdb <- TxDb.Dmelanogaster.UCSC.dm3.ensGene
sd(c(5,8,12))
which.min(c(4,1,6))
library(pasillaBamSubset)
bam.file <- untreated3_chr4()
library(Rsamtools)
bf <- BamFile(bam.file)
library(TxDb.Dmelanogaster.UCSC.dm3.ensGene)
txdb <- TxDb.Dmelanogaster.UCSC.dm3.ensGene
source("http://www.bioconductor.org/biocLite.R")
biocLite()
biocVersion()
biocLite("minfi")
packageversion(minfi)
packageVersion(minfi)
?packageVersion
install.packages("Rmpi")
package(minfi)
packageVersion(minfi)
packageVersion("minfi")
library(BSgenome.Hsapiens.UCSC.hg19)
chr22 = Hsapiens[["chr22"]]
s = subseq(chr22,start=23456789,width=1000)
print( as.character(s) )
?s
class(s)
alphabetFrequency(s)
letterFrequency(s)
letterFrequency(s, letters="GC")
letterFrequency(s, letters="GC")/length(s)
length(s)
?consensusString
?consensusString(s, "GC")
countPattern("GC", s)
countPattern("cG", s)
class(txdb)
str(txdb)
ebg <-exonsBy(txdb, by="gene")
str(ebg)
class(ebg)
head(ebg)
chr4.idx <- all(seqnames(ebg) == "chr4")
ebg.sub <- ebg[chr4.idx]
?summarizeOverlaps
ebg.count <-summarizeOverlaps(ebg.sub, ignore.strand=TRUE, singleEnd=false)
?summarizeOverlaps
ebg.count <-summarizeOverlaps (ebg.sub, ignore.strand=TRUE, singleEnd=false)
library(genomicFeatures)
library(GenomicFeatures)
ebg.count <-summarizeOverlaps(ebg.sub, ignore.strand=TRUE, singleEnd=false)
library("GenomicAlignments", lib.loc="C:/Program Files/R/R-3.1.2/library")
ebg.count <-summarizeOverlaps(ebg.sub, ignore.strand=TRUE, singleEnd=false)
library(GenomicAlignments)
ebg.count <-summarizeOverlaps(ebg.sub, ignore.strand=TRUE, singleEnd=false)
library(biocInstaller)
biocLite()
ebg.count <-summarizeOverlaps(ebg.sub, ignore.strand=TRUE, singleEnd=false)
library(Rsamtools)
ebg.count <-summarizeOverlaps(ebg.sub, ignore.strand=TRUE, singleEnd=false)
str(ebg.sub)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
myPlot()
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(airquality)
install.packages(c("manipulate", "Rmpi"))
library(manipulate)
install.packages("airquality")
install_github('rCharts', 'ramnathv')
library(devtools)
install_github('rCharts', 'ramnathv')
library(rCharts)
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
n1$print("chart3")
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
n1$print("chart3")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h2('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
),
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
shinyServer(
function(input, output) {
#output$myHist <- renderPlot({
output$newHist <-renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(pasillaBamSubset)
library(GenomicFeatures)
bam.file <- untreated3_chr4()
library(Rsamtools)
bf <- BamFile(bam.file)
library(TxDb.Dmelanogaster.UCSC.dm3.ensGene)
txdb <- TxDb.Dmelanogaster.UCSC.dm3.ensGene
ebg <-exonsBy(txdb, by="gene")
chr4.idx <- all(seqnames(ebg) == "chr4")
ebg.sub <- ebg[chr4.idx]
library(GenomicAlignments)
library(Rsamtools)
?summarizeOverlaps
ebg.count <-summarizeOverlaps(ebg.sub, bf, ignore.strand=TRUE, singleEnd=false)
ebg.count <-summarizeOverlaps(ebg.sub, bf, ignore.strand=TRUE, singleEnd=FALSE)
ebg.count
ebg.count[1]
rowData(ebg.count)
assay(ebg.count)
download.file("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/wang_eset.RData", "wang_eset.RData")
load("wang_eset.RData")
library(Biobase)
count.matrix <- exprs(wang.eset)[,10:21]
col.data <- pData(wang.eset)[10:21,]
load("wang_eset.RData")
library(Biobase)
count.matrix <- exprs(wang.eset)[,10:21]
col.data <- pData(wang.eset)[10:21,]
library(DESeq2)
dds <- DESeqDataSetFromMatrix(count.matrix, col.data, design=~1)
dds$cell.type
install.packages(c("cem", "MuMIn"))
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install_github('ramnathv/slidifyLibraries', 'ramnathv')
size <-estimateSizeFactors(dds)
size
?estimateFactors
?estimateSizeFactors
dds <-estimateSizeFactors(dds)
sizeFactors(dds)
colData(dds)
estimateFactors(dds)
sizeFactors(dds)
max(sizeFactors(dds))
dds$cell.type[dds$sample.id=="SRX003934"]
head(count.matrix)
count.matrix.rg <-rlog(count.matrix)
head(count.matrix.rg)
pc <-prcomp(t(count.matrix.rg))
?colData
col.data
plot(pc$x[,1], pc$x[,2], col=colData$cell.type)
plot(pc$x[,1], pc$x[,2])
plot(pc$x[,1], pc$x[,2], col=col.data$cell.type)
plot(pc$x[,1], pc$x[,2], col=col.data$cell.type, legend=TRUE)
plotPCA(count.matrix.rg, ingroup="cell.type")
plotPCA(count.matrix.rg, intgroup="cell.type")
?plotPCA
plotPCA(count.matrix.rg, intgroup=col.data$cell.type)
rld <-rlog(dds)
plotPCA(rld, intgroup="cell.type")
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)  {
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
rmeans <- rowMeans(assay(rld)) # row mean of rlog-transformed data
idx <- c(1,2,10,7,8,9,12) # pick some samples for visualization
mat <- assay(rld)[rmeans > 1,idx] # pull out a small matrix of rlog-transformed counts
colnames(mat) <- rld$cell.type[idx] # name the columns of matrix by cell type
pairs(mat, asp=1, col=rgb(0,0,0,.3), lower.panel=panel.cor)
load("wang_eset.RData")
library(Biobase)
count.matrix <- exprs(wang.eset)[,10:21]
col.data <- pData(wang.eset)[10:21,]
library(DESeq2)
dds <- DESeqDataSetFromMatrix(count.matrix, col.data, design=~1)
"brain", "other"))
dds$type <- factor(ifelse(dds$cell.type %in% c("cerebellum","mixed.brain"), "brain", "other"))
dds$type <- relevel(dds$type, "other")
design(dds) <- ~ type
dds<-DESeq(dds)
res<-results(dds)
summary(res)
plotMA(res)
head(res)
res[1]
res
str(res)
plotMA(res, yim=c(-10,10))
plotMA(res, yim=c(-1,1))
plotMA(res, yim=c(-10,10))
head(res\)
head(res)
res$pvalue[1]
res$pvalue[which.min(res$pvalue)]
res[1.]
res[1,]
res[which.min(res$pvalue),]
res2<-results(dds, lfcThreshold=2)
plotMA(res2, yim=c(-10,10))
summary(res2)
warnings()
install.packages("pheatmap")
plotCounts(dds, which.min(res$padj), intgroup="type")
par(mfrow=c(3,3))
for (i in 1:9)  plotCounts(dds, order(res$padj)[i], intgroup="type")
top <- rownames(res)[head(order(res$stat, decreasing=TRUE), 20)]
top
library(org.HS.eg.db)
library("BiocInstaller", lib.loc="C:/Program Files/R/R-3.1.2/library")
biocLite("org.HS.eg.db")
2
library(org.Hs.eg.db)
anno <- select(org.Hs.eg.db, keys=top, columns=c("SYMBOL", "GENENAME"))
top
anno <- select(org.Hs.eg.db, keys=top, columns=c("SYMBOL", "GENENAME"), keytype="ENSEMBL")
anno[match(top, anno$ENSEMBL)]
anno[match(top, anno$ENSEMBL),]
library(AnnotationHub)
ah = AnnotationHub()
head(ah)
ah = subset(ah,ah$genome=="hg19")
query(ah,"genes")
library(AnnotationHub)
ah = AnnotationHub()
head(ah)
ah = subset(ah,ah$genome=="hg19")
query(ah,"genes")
ah = subset(ah,Genome=="hg19")
query(ah,"genes")
shiny::runApp('CourseraDataScienceSeries/DataProducts/Project')
tmp <-c(1,2,2,4,3,6,5,8,4,5,6,3,6,3,4,7)
tmp
library(Hmisc)
describe(tmp)
shiny::runApp('CourseraDataScienceSeries/DataProducts/Project')
?hist
shiny::runApp('CourseraDataScienceSeries/DataProducts/Project')
))
shiny::runApp('CourseraDataScienceSeries/DataProducts/Project')
runDeck("index.Rmd")
library(slidify)
runDeck()
getwd()
setwd("C:/Users/jbullis/SkyDrive/Documents/Academic-ESSEX/CourseraDataScienceSeries/DataProducts/Presentation/DataProductsPresentation")
runDeck()
